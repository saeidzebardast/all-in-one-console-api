{"name":"All in one Console API","tagline":"","body":"# All in one Console API\r\nThis repository contains some samples of using the Console API. All the essential methods of Console API are included with a sample in [README.md](README.md).\r\n\r\n----\r\n\r\n## What's Console API?\r\n\r\nThe Console API provides web applications with methods for writing information to the console, creating JavaScript profiles, and initiating a debugging session.\r\n\r\n----\r\n\r\n## Non-standard\r\nsee [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/API/Console)\r\n\r\n>\r\nThis feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\".\r\n\r\n----\r\n\r\n## Methods\r\n\r\n### console.log(object[, object, ...])\r\nWrites a message to the console. You may pass as many arguments as you'd like, and they will be joined together in a space-delimited line.\r\n\r\n```javascript\r\nconsole.log('This is a sample log');\r\n```\r\n\r\n\r\n### console.debug(object[, object, ...])\r\nWrites a message to the console, including a hyperlink to the line where it was called.\r\n\r\n```javascript\r\nconsole.debug('I am debug message');\r\n```\r\n\r\n### console.info(object[, object, ...])\r\nWrites a message to the console with the visual \"info\" icon and color coding and a hyperlink to the line where it was called.\r\n\r\n```javascript\r\nconsole.info('I just want to share info!');\r\n```\r\n\r\n### console.warn(object[, object, ...])\r\nWrites a message to the console with the visual \"warning\" icon and color coding and a hyperlink to the line where it was called.\r\n\r\n```javascript\r\nconsole.warn('Be quite! Big brother is watching you!');\r\n```\r\n\r\n### console.error(object[, object, ...])\r\nWrites a message to the console with the visual \"error\" icon and color coding and a hyperlink to the line where it was called.\r\n\r\n```javascript\r\nconsole.error('Something goes wrong!');\r\n```\r\n\r\n### console.assert(expression[, object, ...])\r\nTests that an expression is true.  If not, it will write a message to the console and throw an exception.\r\n\r\n```javascript\r\nconsole.assert((2 + 3) === 5); // Assertation true\r\nconsole.assert((2 * 1 * 0) === 3, 'It should be 0!'); // Assertation faild\r\n```\r\n\r\n### console.clear()\r\nClears the console.\r\n\r\n```javascript\r\nconsole.clear();\r\n```\r\n\r\n### console.dir(object)\r\nPrints an interactive listing of all properties of the object.\r\n\r\n```javascript\r\nconsole.dir(document.body);\r\n```\r\n\r\n\r\n### console.dirxml(node)\r\nPrints the XML source tree of an HTML or XML element.\r\n\r\n```javascript\r\nconsole.dirxml(document.body);\r\n```\r\n\r\n### console.trace()\r\nPrints an interactive stack trace of JavaScript execution at the point where it is called.\r\n\r\n```javascript\r\nconsole.trace();\r\n```\r\n\r\nThe stack trace details the functions on the stack, as well as the values that were passed as arguments to each function.\r\n\r\n### console.group(object[, object, ...])\r\nWrites a message to the console and opens a nested block to indent all future messages sent to the console. Call `console.groupEnd()` to close the block.\r\n\r\n```javascript\r\nconsole.group('Group log is started:');\r\n```\r\n\r\n### console.groupCollapsed(object[, object, ...])\r\nLike `console.group()`, but the block is initially collapsed.\r\n\r\n```javascript\r\nconsole.groupCollapsed('Group log is started (collapsed):');\r\n```\r\n\r\n### console.groupEnd()\r\nCloses the most recently opened block created by a call to `console.group()` or `console.groupCollapsed()`\r\n\r\n```javascript\r\nconsole.groupEnd();\r\n```\r\n\r\n### console.time(name)\r\nCreates a new timer under the given name. Call `console.timeEnd()` with the same name to stop the timer and print the time elapsed.\r\n\r\n```javascript\r\nconsole.time('timer');\r\n```\r\n\r\n### console.timeEnd(name)\r\nStops a timer created by a call to `console.time(name)` and writes the time elapsed.\r\n\r\n```javascript\r\nconsole.timeEnd('timer');\r\n```\r\n\r\n### console.timeStamp(name)\r\nCreates a time stamp.\r\n\r\n```javascript\r\nconsole.timeStamp('timeStamp');\r\n```\r\n\r\n### console.profile([title])\r\nTurns on the JavaScript profiler.\r\n\r\n```javascript\r\nconsole.profile('my-profile');\r\n```\r\n\r\n### console.profileEnd()\r\nTurns off the JavaScript profiler and prints its report.\r\n\r\n```javascript\r\nconsole.profileEnd('my-profile');\r\n```\r\n\r\n### console.count([title])\r\nWrites the number of times that the line of code where `count` was called was executed.\r\n\r\n```javascript\r\nconsole.count('count this line!');\r\n```\r\n\r\n### console.table(data[, columns])\r\nAllows to log provided data using tabular layout.\r\n\r\n```javascript\r\nconsole.table([\"apples\", \"oranges\", \"bananas\"]);\r\n```\r\n\r\n----\r\n\r\n## More info\r\n* [developer.chrome.com](https://developer.chrome.com/devtools/docs/console-api)\r\n* [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/API/Console)\r\n* [getfirebug.com](https://getfirebug.com/wiki/index.php/Console_API)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}